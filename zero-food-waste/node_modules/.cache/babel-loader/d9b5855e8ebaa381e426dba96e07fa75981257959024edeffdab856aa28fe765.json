{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\amimu\\\\OneDrive\\\\Desktop\\\\FYP\\\\zero-food-waste\\\\src\\\\Pages\\\\Message.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport '../CSS/Message.css'; // Ensure the path to your CSS file is correct\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Message = () => {\n  _s();\n  const [selectedConversation, setSelectedConversation] = useState(null);\n  const [conversations, setConversations] = useState([{\n    id: 1,\n    name: 'Mert',\n    messages: ['Hi, that food is still available?']\n  }\n  // ... other conversations\n  ]);\n  const [newMessage, setNewMessage] = useState('');\n  const selectConversation = conversation => {\n    setSelectedConversation(conversation);\n  };\n  const sendMessage = () => {\n    if (newMessage.trim() === '' || !selectedConversation) return;\n    // Here, you would handle sending the message to the server\n    // and then fetching the updated conversation messages\n    setNewMessage('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"message-app\",\n    children: [/*#__PURE__*/_jsxDEV(\"aside\", {\n      className: \"conversation-list\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"conversation-details\",\n      children: selectedConversation ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-header\",\n          children: selectedConversation.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"messages\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-input-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: newMessage,\n            onChange: e => setNewMessage(e.target.value),\n            placeholder: \"Type new message here\",\n            className: \"message-input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: sendMessage,\n            className: \"send-button\",\n            children: \"\\u27A4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no-conversation\",\n        children: \"Select a conversation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n_s(Message, \"e7mYjMmoMYyU/jw55f8hagXyTdk=\");\n_c = Message;\nexport default Message;\nvar _c;\n$RefreshReg$(_c, \"Message\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Message","_s","selectedConversation","setSelectedConversation","conversations","setConversations","id","name","messages","newMessage","setNewMessage","selectConversation","conversation","sendMessage","trim","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/amimu/OneDrive/Desktop/FYP/zero-food-waste/src/Pages/Message.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport '../CSS/Message.css'; // Ensure the path to your CSS file is correct\r\n\r\nconst Message = () => {\r\n  const [selectedConversation, setSelectedConversation] = useState(null);\r\n  const [conversations, setConversations] = useState([\r\n    { id: 1, name: 'Mert', messages: ['Hi, that food is still available?'] },\r\n    // ... other conversations\r\n  ]);\r\n  const [newMessage, setNewMessage] = useState('');\r\n\r\n  const selectConversation = (conversation) => {\r\n    setSelectedConversation(conversation);\r\n  };\r\n\r\n  const sendMessage = () => {\r\n    if (newMessage.trim() === '' || !selectedConversation) return;\r\n    // Here, you would handle sending the message to the server\r\n    // and then fetching the updated conversation messages\r\n    setNewMessage('');\r\n  };\r\n\r\n  return (\r\n    <div className=\"message-app\">\r\n      <aside className=\"conversation-list\">\r\n        {/* ... */}\r\n      </aside>\r\n      <section className=\"conversation-details\">\r\n        {selectedConversation ? (\r\n          <>\r\n            <div className=\"chat-header\">{selectedConversation.name}</div>\r\n            <div className=\"messages\">\r\n              {/* ... */}\r\n            </div>\r\n            <div className=\"message-input-container\">\r\n              <input\r\n                type=\"text\"\r\n                value={newMessage}\r\n                onChange={(e) => setNewMessage(e.target.value)}\r\n                placeholder=\"Type new message here\"\r\n                className=\"message-input\"\r\n              />\r\n              <button onClick={sendMessage} className=\"send-button\">âž¤</button>\r\n            </div>\r\n          </>\r\n        ) : (\r\n          <div className=\"no-conversation\">Select a conversation</div>\r\n        )}\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Message;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}