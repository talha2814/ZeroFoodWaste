{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\amimu\\\\OneDrive\\\\Desktop\\\\FYP\\\\zero-food-waste\\\\src\\\\Pages\\\\Home.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mockPosts = []; // This is a mock database\n\nconst NewPostForm = ({\n  onNewPost\n}) => {\n  _s();\n  const [post, setPost] = useState({\n    productName: '',\n    description: '',\n    // For simplicity, we will just store the image as a string here.\n    // In a real application, you would handle file uploads separately.\n    image: '',\n    location: ''\n  });\n  const handleSubmit = event => {\n    event.preventDefault();\n    onNewPost(post);\n    setPost({\n      productName: '',\n      description: '',\n      image: '',\n      location: ''\n    }); // Reset form\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: post.productName,\n      onChange: e => setPost({\n        ...post,\n        productName: e.target.value\n      }),\n      placeholder: \"Product Name\",\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: post.description,\n      onChange: e => setPost({\n        ...post,\n        description: e.target.value\n      }),\n      placeholder: \"Description\",\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: post.image,\n      onChange: e => setPost({\n        ...post,\n        image: e.target.value\n      }),\n      placeholder: \"Image URL\",\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: post.location,\n      onChange: e => setPost({\n        ...post,\n        location: e.target.value\n      }),\n      placeholder: \"Location\",\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Create Post\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n_s(NewPostForm, \"SfJyrfEr6GEHfNE8itCYSpxhupc=\");\n_c = NewPostForm;\nconst PostsList = ({\n  posts\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: posts.map((post, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: post.productName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: post.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: post.image,\n        alt: post.productName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Location: \", post.location]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_c2 = PostsList;\nconst Home = () => {\n  _s2();\n  const [posts, setPosts] = useState(mockPosts);\n  const handleNewPost = newPost => {\n    setPosts([...posts, newPost]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(NewPostForm, {\n      onNewPost: handleNewPost\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PostsList, {\n      posts: posts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n_s2(Home, \"VG0glXpAf98tfOoqjiZey5GlWsA=\");\n_c3 = Home;\nexport default Home;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"NewPostForm\");\n$RefreshReg$(_c2, \"PostsList\");\n$RefreshReg$(_c3, \"Home\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","mockPosts","NewPostForm","onNewPost","_s","post","setPost","productName","description","image","location","handleSubmit","event","preventDefault","onSubmit","children","type","value","onChange","e","target","placeholder","required","fileName","_jsxFileName","lineNumber","columnNumber","_c","PostsList","posts","map","index","src","alt","_c2","Home","_s2","setPosts","handleNewPost","newPost","_c3","$RefreshReg$"],"sources":["C:/Users/amimu/OneDrive/Desktop/FYP/zero-food-waste/src/Pages/Home.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst mockPosts = []; // This is a mock database\r\n\r\nconst NewPostForm = ({ onNewPost }) => {\r\n  const [post, setPost] = useState({\r\n    productName: '',\r\n    description: '',\r\n    // For simplicity, we will just store the image as a string here.\r\n    // In a real application, you would handle file uploads separately.\r\n    image: '',\r\n    location: '',\r\n  });\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    onNewPost(post);\r\n    setPost({ productName: '', description: '', image: '', location: '' }); // Reset form\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        value={post.productName}\r\n        onChange={(e) => setPost({ ...post, productName: e.target.value })}\r\n        placeholder=\"Product Name\"\r\n        required\r\n      />\r\n      <textarea\r\n        value={post.description}\r\n        onChange={(e) => setPost({ ...post, description: e.target.value })}\r\n        placeholder=\"Description\"\r\n        required\r\n      />\r\n      <input\r\n        type=\"text\"\r\n        value={post.image}\r\n        onChange={(e) => setPost({ ...post, image: e.target.value })}\r\n        placeholder=\"Image URL\"\r\n        required\r\n      />\r\n      <input\r\n        type=\"text\"\r\n        value={post.location}\r\n        onChange={(e) => setPost({ ...post, location: e.target.value })}\r\n        placeholder=\"Location\"\r\n        required\r\n      />\r\n      <button type=\"submit\">Create Post</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst PostsList = ({ posts }) => {\r\n  return (\r\n    <div>\r\n      {posts.map((post, index) => (\r\n        <div key={index}>\r\n          <h3>{post.productName}</h3>\r\n          <p>{post.description}</p>\r\n          <img src={post.image} alt={post.productName} />\r\n          <p>Location: {post.location}</p>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Home = () => {\r\n  const [posts, setPosts] = useState(mockPosts);\r\n\r\n  const handleNewPost = (newPost) => {\r\n    setPosts([...posts, newPost]);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <NewPostForm onNewPost={handleNewPost} />\r\n      <PostsList posts={posts} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}